colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
# Samenvoegen van de NC8 stam en WCFS1 stam in een dataframe.
WCFS1.NC8_FC_all_genes <- cbind(fitGene_WCFS1$logFC, fitGene_NC8$logFC)
rownames(WCFS1.NC8_FC_all_genes) <- rownames(fitGene_WCFS1)
colnames(WCFS1.NC8_FC_all_genes) <- c("WFCS1", "NC8")
# Samenvoegen van de NC8 stam en WCFS1 stam in een dataframe.
WCFS1.NC8_FC <- merge(WCFS1_pass, NC8_pass, by = "row.names", all=TRUE)
rownames(WCFS1.NC8_FC) <- WCFS1.NC8_FC[,1]
WCFS1.NC8_FC <<- WCFS1.NC8_FC[,-1]
colnames(WCFS1.NC8_FC) <<- c("WFCS1", "NC8")
# Samenvoegen van de glucose conditie en ribose conditie in een dataframe.
glc.rib_FC <- merge(Glc_pass, Rib_pass, by = "row.names", all = TRUE)
rownames(glc.rib_FC) <- glc.rib_FC[,1]
glc.rib_FC <<- glc.rib_FC[,-1]
colnames(glc.rib_FC) <<- c("Glucose", "Ribose")
write.csv(glc.rib_FC, file = 'test.csv')
}
################################################
# Significante genen bepalen (absolute FC > 1 EN de FDR is kleiner dan 0.05).
################################################
checkGenes <- function(stem){
# Berekenen van de FDR dmv de p-value met de BH methode.
stem$FDR <- p.adjust(stem$PValue, method = "BH")
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
# Alleen de Fold-Changes overhouden
significantGenes <-data.frame(sign_pVal$logFC)
rownames(significantGenes) <- rownames(sign_pVal)
return(significantGenes)
}
Normalize(counts)
View(WCFS1_FoldChange)
View(WCFS1_pass)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library(edgeR)                                                                #Loading in librarys
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
}
################################################
# Significante genen bepalen (absolute FC > 1 EN de FDR is kleiner dan 0.05).
################################################
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
Normalize(counts)
pdf("Results/EdgeR.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library(edgeR)                                                                #Loading in librarys
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
}
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library(edgeR)                                                                #Loading in librarys
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
dev.off()
}
Normalize(counts)
Normalize(counts)
Normalize(counts)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library(edgeR)                                                                #Loading in librarys
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
dev.off()
}
################################################
# Significante genen bepalen (absolute FC > 1 EN de FDR is kleiner dan 0.05).
################################################
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
Normalize(counts)
Normalize(counts)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library(edgeR)                                                                #Loading in librarys
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
# Schatten van de dispersie. De breedte van de verdeling wordt bepaald.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
################################################
# Significante genen bepalen (absolute FC > 1 EN de FDR is kleiner dan 0.05).
################################################
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
Normalize(counts)
Normalize(counts)
View(WCFS1_pass)
View(Glc_pass)
View(Rib_pass)
View(WCFS1_pass)
View(Rib_pass)
Glc_ordered <<- orderedData(Glc_pass)
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
orderedData <- data[order(sign_pVal.logFC),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
View(NC8_pass)
sortGenes <- function(data){
orderedData <- data[order(logFC),]
return(orderedData)
}
sortGenes <- function(data){
orderedData <- data[order(logFC),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
Glc_pass
sortGenes <- function(data){
orderedData <- data[order(),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
View(WCFS1_pass)
sortGenes <- function(data){
orderedData <- data[order(1),]
return(orderedData)
}
sortGenes <- function(data){
data
orderedData <- data[order(1),]
return(orderedData)
}
sortGenes <- function(data){
data
orderedData <- data[order(1),]
return(orderedData)
}
sortGenes <- function(data){
data
orderedData <<- data[order(1),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
Glc_ordered <<- sortGenes(Glc_pass)
Glc_ordered <<- sortGenes(Glc_pass)
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(1),]
return(orderedData)
}
sortGenes <- function(data){
print(data)
orderedData <<- data[order(1),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(sign_pVal.logFC),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(sign_pVal),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(logFC),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(data$sign_pVal.logFC),]
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <<- data[order(data$sign_pVal.logFC),]
print(data)
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <- data[order(data$sign_pVal.logFC),]
print(data)
return(orderedData)
}
Glc_ordered <<- sortGenes(Glc_pass)
Glc_ordered <- sortGenes(Glc_pass)
sortGenes <- function(data){
print(data)
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])
print(data)
return(orderedData)
}
Glc_ordered <- sortGenes(Glc_pass)
View(Glc_ordered)
sortGenes <- function(data){
print(data)
data$gene <- as.numeric(row.names(data))
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])
print(data)
return(orderedData)
}
Glc_ordered <- sortGenes(Glc_pass)
View(Glc_ordered)
sortGenes <- function(data){
print(data)
data$gene <- (row.names(data))
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])
print(data)
return(orderedData)
}
Glc_ordered <- sortGenes(Glc_pass)
View(Glc_ordered)
View(WCFS1_FoldChange)
Glc_ordered <- sortGenes(Glc_pass)
NC8_ordered <- sortGenes(NC8_pass)
Rib_ordered <- sortGenes(Rib_pass)
WCFS1_ordered <- sortGenes(WCFS1_pass)
sortGenes <- function(data){
data$gene <- (row.names(data))
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])
return(orderedData)
}
Glc_ordered <- sortGenes(Glc_pass)
NC8_ordered <- sortGenes(NC8_pass)
Rib_ordered <- sortGenes(Rib_pass)
WCFS1_ordered <- sortGenes(WCFS1_pass)
View(NC8_ordered)
library('KEGGREST')
library('KEGG.db')
library('pathview')
install.packages('KEGGREST')
install.packages('KEGG')
install.packages('KEGG.db')
biocLite("KEGG.db")
install.packages('KEGG.db')
source("https://bioconductor.org/biocLite.R")
install.packages('KEGG.db')
source("https://bioconductor.org/biocLite.R")
biocLite("KEGG.db")
install.packages("rJava")
biocLite("KEGG.db")
