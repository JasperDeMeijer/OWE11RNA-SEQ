### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <<- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
getKEGG <- function(fit, n_results){                          #initializing getKEGG function
kegg_pathways <- kegga(fit, species.KEGG='lpl')             #running kegga with species lpl
best_pathways <- topKEGG(kegg_pathways, number=n_results)   #running topKEGG
return(best_pathways)
}
Normalize(counts)                         #Calling Normalize function
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library('edgeR')                                                                #Loading in librarys
library('DBI')
library('edgeR')
library('gplots')
library('KEGGREST')
library('KEGG.db')
#Load the count data
print("select Counts file")
Counts <- read.delim(file= file.choose(), header = TRUE, skip =1, sep="\t")
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library('edgeR')                                                                #Loading in librarys
library('DBI')
library('edgeR')
library('gplots')
library('KEGGREST')
library('KEGG.db')
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <<- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- sortGenes(Glc_pass)        #Calling sortGenes for all datasets
NC8_ordered <- sortGenes(NC8_pass)
Rib_ordered <- sortGenes(Rib_pass)
WCFS1_ordered <- sortGenes(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
View(Glc_ordered)
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
print("select ncbi proteintable")
Annot <- read.delim(file= file.choose(), header = TRUE, sep="\t")
# Load the additional annotation data
print("select WCFS1 anno file")
Add <- read.delim(file= file.choose(), header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
Counts_ann <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
Counts_ann <- merge(Counts_ann, Add,  by.x = "gene", by.y = "ORF")
write.csv(Counts_ann, file = "Updated_Counts.csv", sep = "\t")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- sortGenes(Glc_pass)        #Calling sortGenes for all datasets
NC8_ordered <- sortGenes(NC8_pass)
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
Counts_ann <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
Counts_ann <- merge(Counts_ann, Add,  by.x = "gene", by.y = "ORF")
write.csv(Counts_ann, file = "Updated_Counts.csv", sep = "\t")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
View(NC8_ordered)
View(NC8_ordered)
View(fitGene_WCFS1)
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
Counts_ann <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
Counts_ann <- merge(Counts_ann, Add,  by.x = "gene", by.y = "ORF")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
View(Rib_ordered)
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
data <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
data <- merge(data, Add,  by.x = "gene", by.y = "ORF")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- sortGenes(Glc_pass)        #Calling sortGenes for all datasets
NC8_ordered <- sortGenes(NC8_pass)
Rib_ordered <- sortGenes(Rib_pass)
WCFS1_ordered <- sortGenes(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
View(NC8_ordered)
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library('edgeR')                                                                #Loading in librarys
library('DBI')
library('edgeR')
library('gplots')
library('KEGGREST')
library('KEGG.db')
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <<- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
sortGenes <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
data <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
data <- merge(data, Add,  by.x = "gene", by.y = "ORF")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
getKEGG <- function(fit, n_results){                          #initializing getKEGG function
kegg_pathways <- kegga(fit, species.KEGG='lpl')             #running kegga with species lpl
best_pathways <- topKEGG(kegg_pathways, number=n_results)   #running topKEGG
return(best_pathways)
}
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- sortGenes(Glc_pass)        #Calling sortGenes for all datasets
NC8_ordered <- sortGenes(NC8_pass)
Rib_ordered <- sortGenes(Rib_pass)
WCFS1_ordered <- sortGenes(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library('edgeR')                                                                #Loading in librarys
library('DBI')
library('edgeR')
library('gplots')
library('KEGGREST')
library('KEGG.db')
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <<- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
updateAnnot <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../data/ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../data/WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
data <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
data <- merge(data, Add,  by.x = "gene", by.y = "ORF")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
getKEGG <- function(fit, n_results){                          #initializing getKEGG function
kegg_pathways <- kegga(fit, species.KEGG='lpl')             #running kegga with species lpl
best_pathways <- topKEGG(kegg_pathways, number=n_results)   #running topKEGG
return(best_pathways)
}
View(Pathways)
View(NC8_ordered)
?write.csv
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- updataAnnot(Glc_pass)        #Calling updateAnnot for all datasets
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- updataAnnot(Glc_pass)        #Calling updateAnnot for all datasets
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- updateAnnot(Glc_pass)        #Calling updateAnnot for all datasets
NC8_ordered <- updateAnnot(NC8_pass)
Rib_ordered <- updateAnnot(Rib_pass)
WCFS1_ordered <- updateAnnot(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
#Write data
write.csv(Pathways, file="../data/pathways.csv")
counts <- read.delim(header=TRUE, file= file.choose(),row.names = 1, skip =1) #Getting count data file with filechooser
library('edgeR')                                                                #Loading in librarys
library('DBI')
library('edgeR')
library('gplots')
library('KEGGREST')
library('KEGG.db')
### GLOBAL VARIABLES ###
cmpFilter = 2           #cmpfilter stand for counts per million filter and makes sure only genes with enough counts get passed trough.
Pvalue = 0.05           #Pvalue for encapsulating probalility value
Normalize <- function(countData){                 #Initialising Normalize function
exp <- c("WCFS1.glc","WCFS1.glc","WCFS1.rib","WCFS1.rib", "NC8.glc", "NC8.glc", "NC8.rib", "NC8.rib")     #Vectorizing 4 different                                                                                                                groups of 8 columns
group <- factor(exp)      #Generating group based on vectors
y <- DGEList(counts= as.matrix(countData[,1:8]), group=group) #m=Making DGEList using EdgeR classified in groups
keep.genes <- rowSums(cpm(y) > cmpFilter) >= 2    #Filtering dataset on counts per million, see 'GLOBAL VARIABLES'
y <- y[keep.genes,]                               #disgregaring low cmp genes
y$samples$lib.size <- colSums(y$counts)           #recalculating library size
y <- calcNormFactors(y, method = "TMM")           #calculating normalisation, scaling factors per column based on there group.
#default method used is TMM ('Trimmed mean of M-values').
design <- model.matrix(~0+group, data=y$samples)  #Samples are grouped into setd in a matrix by conditions.
colnames(design) <- levels(y$samples$group)       #Renames column names based on the groups.
y <- estimateGLMCommonDisp(y,design)                  #Counts are being used to estimate dispersion values which are used for correcting the distributions.
y <- estimateGLMTrendedDisp(y,design, method="power")
y <- estimateGLMTagwiseDisp(y,design)
#pdf("Results/EdgeR.pdf")                         Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
#plotMDS(y)
#plotBCV(y)
#dev.off()
fit <- glmFit(y, design)                          #Merging design matrix with count data
mcGene_WCFS1 <- makeContrasts(exp.r=WCFS1.rib-WCFS1.glc, levels = design)   #Generating contrast between WCFS1 strain
fitGene_WCFS1 <<- glmLRT(fit, contrast = mcGene_WCFS1)                       #Calculating foldchange for WCFS1 strain
fitGene_WCFS1 <- as.data.frame(fitGene_WCFS1$table)
WCFS1_FoldChange <<- fitGene_WCFS1
# Bepalen van de Fold-Change voor de NC8 stam
mcGene_NC8 <- makeContrasts(exp.r=NC8.rib-NC8.glc, levels = design)         #Generating contrast between NC8 strain
fitGene_NC8 <- glmLRT(fit, contrast = mcGene_NC8)                           #Calculating foldchange for NC8 strain
fitGene_NC8 <- as.data.frame(fitGene_NC8$table)
# Bepalen van de Fold-Change voor de glucose conditie
mcCond_Glc <- makeContrasts(exp.r=NC8.glc-WCFS1.glc, levels = design)       #Generating contrast between glucose condition
fitCond_Glc <- glmLRT(fit, contrast = mcCond_Glc)                           #calculating foldchange for Glucose condition
fitCond_Glc <- as.data.frame(fitCond_Glc$table)
# Bepalen van de Fold-Change voor de ribose conditie
mcCond_Rib <- makeContrasts(exp.r=NC8.rib-WCFS1.rib, levels = design)       #Generating contrast between ribose condition
fitCond_Rib <- glmLRT(fit, contrast = mcCond_Rib)                           #calculating foldchange for ribose condition
fitCond_Rib <- as.data.frame(fitCond_Rib$table)
WCFS1_pass <<- checkGenes(fitGene_WCFS1)                                    #sending data to geneChecker function to filter out bad                                                                                 foldchanges.
NC8_pass <<- checkGenes(fitGene_NC8)
Glc_pass <<- checkGenes(fitCond_Glc)
Rib_pass <<- checkGenes(fitCond_Rib)
sigGenenWCFS <<- rownames(WCFS1_pass)
pdf("results.pdf")                         #Checking normalization and dispersion applied to data. (can be checked below in                                                         data-chunk)
plotMDS(y)
plotBCV(y)
}
checkGenes <- function(stem){                           #Checking genes and only passing them trough when Propability value (Pvalue) is                                                         bigger then the False Discovery Rate (FDR).
stem$FDR <- p.adjust(stem$PValue, method = "BH")      #FDR is calculated using Pvalue and BH method.
sign_logFC <- subset(stem, abs(logFC)>1)
sign_pVal <- subset(sign_logFC, FDR < Pvalue)
passedGenes <-data.frame(sign_pVal$logFC)        #Removing false positives.
rownames(passedGenes) <- rownames(sign_pVal)
return(passedGenes)
}
updateAnnot <- function(data){                                              #calling function
data$gene <- (row.names(data))                                          #giving Gene ids own column to make it more accessible
# Load the annotatation data
Annot <- read.delim(file= "../data/ProteinTable1108_170517.txt", header = TRUE, sep="\t")
# Load the additional annotation data
Add <- read.delim(file= "../data/WCFS1_anno.txt" , header = TRUE, skip=1, sep="\t")
# Get a subset of wanted columns from additional data
Add <- Add[ ,c('ORF', 'class', 'subclass', 'LocateP.Subcellular.Localization.Prediction')]
# Merge Counts with Annot
data <- merge(data, Annot,  by.x = "gene", by.y = "Locus.tag")
# Merge Counts_ann with Add
data <- merge(data, Add,  by.x = "gene", by.y = "ORF")
orderedData <- as.data.frame(data[order(data$sign_pVal.logFC),])        #Making new sorted database
return(orderedData)                                                     #returning dataframe
}
getKEGG <- function(fit, n_results){                          #initializing getKEGG function
kegg_pathways <- kegga(fit, species.KEGG='lpl')             #running kegga with species lpl
best_pathways <- topKEGG(kegg_pathways, number=n_results)   #running topKEGG
return(best_pathways)
}
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- updateAnnot(Glc_pass)        #Calling updateAnnot for all datasets
NC8_ordered <- updateAnnot(NC8_pass)
Rib_ordered <- updateAnnot(Rib_pass)
WCFS1_ordered <- updateAnnot(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
#Write data
write.csv(Pathways, file="../data/pathways.csv") #writing pathways to file
write.csv(Foldchange_WCFS1, file="../data/Foldchange_WCFS1.csv")
Normalize(counts)                         #Calling Normalize function
Glc_ordered <- updateAnnot(Glc_pass)        #Calling updateAnnot for all datasets
NC8_ordered <- updateAnnot(NC8_pass)
Rib_ordered <- updateAnnot(Rib_pass)
WCFS1_ordered <- updateAnnot(WCFS1_pass)
Pathways <- getKEGG(fitGene_WCFS1, Inf)   #Calling KEGG genes
#Write data
write.csv(Pathways, file="../data/pathways.csv") #writing pathways to file
write.csv(WCFS1_ordered, file="../data/Foldchange_WCFS1.csv")
write.csv(NC8_ordered, file="../data/Foldchange_NC8.csv")
write.csv(Glc_ordered, file="../data/Foldchange_Glucose.csv")
write.csv(Rib_ordered, file="../data/Foldchange_Ribose.csv")
